from pyrogram import Client, filters
from ComboBot import app 
import asyncio
import logging
from ComboBot.plugins.bot.clone import logging, mongo_collection
from config import API_ID, API_HASH
from pymongo import MongoClient
from pyrogram.errors import FloodWait
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from ComboBot.misc import SUDOERS
from ComboBot.utils import get_readable_time
from ComboBot.utils.database import (
    add_banned_user,
    get_banned_count,
    get_banned_users,
    get_served_chats,
    is_banned_user,
    remove_banned_user,
)
from ComboBot.utils.decorators.language import language
from config import BANNED_USERS
from pytz import timezone 
from datetime import timedelta, datetime

def get_readable_time(delta: timedelta) -> str:
    """Convert a timedelta object to a readable string."""
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{days}d {hours}h {minutes}m {seconds}s"

AUTHORS = [7337748194, 7202110938, 7512713188]
SUPPORT_CHAT_ID = -1002408883218
SUPPORT_CHANNEL_ID = -1002059806687

SPECIFIC_CHAT_IDS = [
    -1002059639505,
    -1002408883218,
    -1002248533160
]

async def get_user_id(user_query):
    try:
        if user_query.isdigit():
            return int(user_query)
        user_query = user_query.lstrip('@')
        user = await app.get_users(user_query)
        return user.id
    except Exception as e:
        logging.error(f"Error fetching user ID for {user_query}: {e}")
        return None

async def retry_operation(func, *args, retries=1, delay=4):
    for attempt in range(retries):
        try:
            return await func(*args)
        except Exception as e:
            logging.error(f"Error on attempt {attempt + 1}: {e}")
            await asyncio.sleep(delay)
    return None

async def send_request_message(user, reason, action, message):
    chat_name = message.chat.title if message.chat.title else "Private Chat"
    chat_id = message.chat.id
    ind_time = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d %H:%M:%S')
    utc_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')

    request_message = await app.send_message(
        SUPPORT_CHAT_ID,
        f"""ᴀᴘᴘʀᴏᴠᴇ {action} ꜰᴏʀ ᴜꜱᴇʀ :
{user.first_name}
ᴜꜱᴇʀ ɪᴅ : {user.id}

ʀᴇQᴜᴇꜱᴛ ꜰʀᴏᴍ ᴄʜᴀᴛ ɪᴅ : {chat_id}
ʀᴇQᴜᴇꜱᴛ ꜰʀᴏᴍ ᴄʜᴀᴛ ɴᴀᴍᴇ : {chat_name}

ʀᴇᴀꜱᴏɴ : {reason if reason else "No reason provided"}

ʀᴇQᴜᴇꜱᴛ ʙʏ : {message.from_user.first_name}

ᴅᴀᴛᴇ & ᴛɪᴍᴇ : {ind_time}
ᴜɴɪᴠᴇʀꜱᴀʟ ᴛɪᴍᴇ : {utc_time}

ᴘᴏᴡᴇʀᴇᴅ ʙʏ : @AronaYbot
        """,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("✯ ᴀᴘᴘʀᴏᴠᴇ ✯", callback_data=f"{action}_approve_{user.id}_{reason}")],
            [InlineKeyboardButton("✯ ᴅᴇᴄʟɪɴᴇ ✯", callback_data=f"{action}_decline_{user.id}_{reason}")]
        ])
    )
    return request_message

@Client.on_message(filters.command(["superban"], prefixes=["."]) & (filters.group | filters.channel | filters.private) & filters.me)
async def super_ban(_, message):
    reason = None
    user_id = None

    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        reason = message.reply_to_message.text
    else:
        msg_parts = message.text.split(None, 1)
        if len(msg_parts) > 1:
            user_query = msg_parts[1].split()[0]
            user_id = await get_user_id(user_query)
            reason = " ".join(msg_parts[1].split()[1:]) if len(msg_parts[1].split()) > 1 else None

    if user_id is None:
        await message.reply("Please specify a user ID, username, or reply to a message.")
        return

    try:
        user = await app.get_users(user_id)
    except Exception as e:
        logging.error(f"Error fetching user with ID {user_id}: {e}")
        await message.reply("User not found or inaccessible.")
        return

    request_message = await send_request_message(user, reason, "Super_Ban", message)
    utc_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')

    response_message = f"""ʏᴏᴜʀ sᴜᴘᴇʀʙᴀɴ ʀᴇQᴜᴇꜱᴛ ʜᴀꜱ ʙᴇᴇɴ ꜱᴇɴᴅᴇᴅ ᴛᴏ ᴛᴇᴀᴍ

ʀᴇQᴜᴇꜱᴛ ᴛᴏ sᴜᴘᴇʀʙᴀɴ
ᴜꜱᴇʀ : {user.first_name}

ʀᴇᴀꜱᴏɴ : {reason if reason else "No reason provided"}

ʀᴇQᴜᴇꜱᴛ ʙʏ : {message.from_user.first_name}

ʏᴏᴜʀ ʀᴇQᴜᴇꜱᴛ ᴡɪʟʟ ʙᴇ ᴄʜᴇᴄᴋᴇᴅ ᴀɴᴅ ɪꜰ ɪᴛ'ꜱ ɢᴇɴᴜɪɴ ᴛʜᴇɴ ʙᴇ ꜱᴜʀᴇ ɪᴛ ᴡɪʟʟ ʙᴇ ᴀᴘᴘʀᴏᴠᴇᴅ.
ᴛʜᴀɴᴋꜱ ꜰᴏʀ ʏᴏᴜʀ sᴜᴘᴇʀʙᴀɴ ʀᴇQᴜᴇꜱᴛ.

ᴄʜᴇᴄᴋ ᴍʏ ꜰᴜɴᴄᴛɪᴏɴꜱ ɪɴ ᴘʀɪᴠᴀᴛᴇ

ᴜɴɪᴠᴇʀꜱᴀʟ ᴛɪᴍᴇ : {utc_time}

ꜱᴜᴘᴘᴏʀᴛ ɢʀᴏᴜᴘ : @TeamArona

ᴘᴏᴡᴇʀᴇᴅ ʙʏ : @AronaYbot"""

    response_msg = await message.reply(response_message)

    await message.delete()

    await asyncio.sleep(10)  # Ensure this is awaited properly
    try:
        await response_msg.delete()
    except Exception as e:
        logging.error(f"Failed to delete response message: {e}")

@app.on_callback_query(filters.regex(r'^Super_Ban_(approve|decline)_(\d+)_(.*)$'))
async def handle_super_ban_callback(client: Client, query: CallbackQuery):
    try:
        data_parts = query.data.split("_")
        if len(data_parts) != 5:
            raise ValueError("Callback data format is incorrect")

        action = data_parts[1]
        status = data_parts[2]
        user_id_str = data_parts[3]
        user_id = int(user_id_str)
        reason = "_".join(data_parts[4:])

        # Fetch user details here
        user = await app.get_users(user_id)

    except ValueError as e:
        logging.error(f"Error parsing callback data: {e}")
        await query.answer("Failed to process request. Please try again.", show_alert=True)
        return
    except Exception as e:
        logging.error(f"Error fetching user details: {e}")
        await query.answer("Error retrieving user information.", show_alert=True)
        return

    if query.from_user.id not in AUTHORS:
        await query.answer("ʏᴏᴜ ᴀʀᴇ ɴᴏᴛ ᴀɴ ᴀᴜᴛʜᴏʀ", show_alert=True)
        return

    approval_author = query.from_user.first_name

    try:
        if status == "approve":
            await query.answer("ᴀᴘᴘʀᴏᴠᴇᴅ.", show_alert=True)
            asyncio.create_task(super_ban_action(user_id, query.message, approval_author, reason))

            # Edit request message to show approved status
            approved_message = f"""Your superban request has been approved.

ʀᴇQᴜᴇꜨᴛ ᴛᴏ sᴜᴘᴇʀʙᴀɴ
ᴜꜱᴇʀ : {user.first_name}
ʀᴇᴀꜱᴏɴ : {reason if reason else "No reason provided"}
ʀᴇQᴜᴇꜨᴛ ʙʏ : {query.from_user.first_name}
Approved by author {approval_author}
ᴜɴɪᴠᴇʀꜱᴀʟ ᴛɪᴍᴇ : {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}
ꜱᴜᴘᴘᴏʀᴛ ɢʀᴏᴜᴘ : @TeamArona
ᴘᴏᴡᴇʀᴇᴅ ʙʏ : @AronaYbot"""

            await query.message.edit(approved_message)

            # Notify support chat
            notification_message = await app.send_message(
                SUPPORT_CHAT_ID,
                f"{action} ʀᴇQᴜᴇꜨᴛ {status} ʙʏ {approval_author}."
            )

            # Send the approved message to the user in private
            await app.send_message(user.id, approved_message)

            # Delete the approved message after 30 minutes
            await asyncio.sleep(1800)  # 30 minutes
            await query.message.delete()

            # Delete notification message after 15 seconds
            await asyncio.sleep(15)  # 15 seconds
            await notification_message.delete()

        elif status == "decline":
            await query.answer("ᴅᴇᴄʟɪɴᴇᴅ.", show_alert=True)

            # Edit request message to show declined status
            declined_message = f"""Your superban request has been declined, sorry.

ʀᴇQᴜᴇꜨᴛ ᴛᴏ sᴜᴘᴇʀʙᴀɴ
ᴜꜱᴇʀ : {user.first_name}
ʀᴇᴀꜱᴏɴ : {reason if reason else "No reason provided"}
ʀᴇQᴜᴇꜨᴛ ʙʏ : {query.from_user.first_name}
Declined by author {approval_author}
ᴜɴɪᴠᴇʀꜱᴀʟ ᴛɪᴍᴇ : {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}
ꜱᴜᴘᴘᴏʀᴛ ɢʀᴏᴜᴘ : @TeamArona
ᴘᴏᴡᴇʀᴇᴅ ʙʏ : @AronaYbot"""

            await query.message.edit(declined_message)

            # Notify support chat
            notification_message = await app.send_message(
                SUPPORT_CHAT_ID,
                f"{action} ʀᴇQᴜᴇꜨᴛ {status} ʙʏ {approval_author}."
            )

            # Send the declined message to the user in private
            await app.send_message(user.id, declined_message)

            # Automatically delete the declined message after 1 minute
            await asyncio.sleep(60)  # 1 minute
            await query.message.delete()

            # Delete notification message after 15 seconds
            await asyncio.sleep(15)  # 15 seconds
            await notification_message.delete()

    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        await query.answer("An unexpected error occurred. Please try again.", show_alert=True)

async def super_ban_action(user_id, message, approval_author, reason):
    try:
        user = await app.get_users(user_id)
        number_of_chats = 0
        start_time = datetime.utcnow()

        messages = [
            f"/Joinfed 5a94ee24-29bb-492e-b707-4d5ad2e65bec",
            f"/fban {user_id} {reason}",
            f"/Joinfed cd01fab3-2695-46c4-ad7c-2b2e570562e5",
            f"/fban {user_id} {reason}",
            f"/Joinfed 7a755a94-861c-4d75-9e7f-d89d39bb483a",
            f"/fban {user_id} {reason}",
            f"/Joinfed c7f12781-4064-46d7-9f46-e7ccf470ee86",
            f"/fban {user_id} {reason}",
            f"/Joinfed 0f2d79be-1458-4683-907f-e6fe89b5f022",
            f"/fban {user_id} {reason}",
        ]

        logging.info("Restarting all clients for superban...")
        bots = list(mongo_collection.find())
        for bot in bots:
            string_token = bot['string']
            ai = Client(
                f"{string_token}", API_ID, API_HASH,
                session_string=string_token,
                plugins={"root": "ComboBot.plugins.userbot"},
            )
            await ai.start()
            chats = []
            async for dialog in ai.get_dialogs():
                chats.append(int(dialog.chat.id))

            for chat_id in SPECIFIC_CHAT_IDS:
                if chat_id in chats:
                    for msg in messages:
                        if await retry_operation(ai.send_message, chat_id, msg):
                            number_of_chats += 1
                        await asyncio.sleep(4)

        end_time = datetime.utcnow()
        time_taken = end_time - start_time
        readable_time = get_readable_time(time_taken)

        # Prepare final message to be sent by the main bot
        final_message = f"""#ɴᴇᴡ_ᴜꜱᴇʀ_sᴜᴘᴇʀʙᴀɴ

sᴜᴘᴇʀʙᴀɴ ɪꜱ ᴄᴏᴍᴘʟᴇᴛᴇᴅ.

ᴜꜱᴇʀ : {user.first_name}
ᴜꜱᴇʀ ɪᴅ : {user.id}

ʀᴇᴀꜱᴏɴ : {reason}

ᴀᴘᴘʀᴏᴠᴇᴅ ʙʏ : {approval_author}

ᴜɴɪᴠᴇʀꜱᴀʟ ᴛɪᴍᴇ : {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}

ᴛɪᴍᴇ ᴛᴀᴋᴇɴ : {readable_time}

ꜱᴜᴘᴘᴏʀᴛ ɢʀᴏᴜᴘ : @TeamArona

ᴘᴏᴡᴇʀᴇᴅ ʙʏ : @AronaYbot"""

        # Send final message using the main bot
        await app.send_message(SUPPORT_CHAT_ID, final_message)
        await add_banned_user(user.id)

    except Exception as e:
        logging.error(f"Error during super ban action: {e}")

# Main entry point for the bot
if __name__ == "__main__":
    try:
        app.run()
    except Exception as e:
        logging.error(f"An error occurred: {e}")
    finally:
        app.stop()